name: test
on:
  pull_request: {}

jobs:
  test-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: yarn install
      - run: yarn test:coverage
      - run: |
          cd github-actions/get-annotations
          yarn install

      - uses: actions/github-script@v5
        with:
          script: |
            const { getAnnotations, getBatches, getText, getSummary } = require('./github-actions/get-annotations')

            const getPatchedLines = (str) => {
              const result = [];
              const regex=/@@ \-[0-9]+,[0-9]+ \+([0-9]+),([0-9]+) @@/g;

              let match;
              do {
                match = regex.exec(str);
                if (match) {
                  const [, startLine, endLine] = match;
                  result.push([startLine, endLine]);
                }
              } while(match)

              return result
            }

            const watchFiles = (await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              per_page: 100,
            })).data.map(f => [f.filename, getPatchedLines(f.patch)]);

            const levels = [
              { glob: "**", level: "failure" },
            ]

            const title = "Jest Coverage Report";
            const text = getText();
            const summary = getSummary();

            const check = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              status: 'completed',
              head_sha: context.payload.pull_request && context.payload.pull_request.head.sha || context.sha,
              conclusion: 'success',
              name: 'jest-coverage',
              output: {
                  title,
                  summary,
                  text,
              }
            });

            const annotations = getAnnotations(levels, watchFiles);
            const annotationBatches = getBatches(annotations, 1);

            for(batch of annotationBatches){
              await github.rest.checks.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                check_run_id: check.data.id,
                output: {
                  title,
                  summary,
                  text,
                  annotations: batch,
                }
              })
            }
